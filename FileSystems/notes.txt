//1 Open a File in async mode
fs.open(path, flags[, mode], callback)
path: This is the string having file name including path.

flags: Flags indicate the behavior of the file to be opened. All possible values have been mentioned below.(r,r+,rsrs+,wx,w+,wx+,a,ax,a+,ax+)

mode: It sets the file mode (permission and sticky bits), but only if the file was created. It defaults to 0666, readable and writeable.

callback: This is the callback function which gets two arguments (err, fd).


//2 Get File Info (Some additional commands: stats.isFile(),stats.isDirectory(),stats.isBlockDevice(),stats.isCharacterDevice(),stats.isSymbolicLink(), stats.isFIFO(), stats.isSocket() )
fs.stat(path,callback)
path: string having file name including path.
callback: has two arguments (err, stats) where stats is an object of fs.Stats type 


//3 Writing a file (This method will over-write the file if the file already exists.)
fs.writeFile(filename, data[, options], callback)
path: string having the file name including path.

data: String or Buffer to be written into the file.

options: The third parameter is an object which will hold {encoding, mode, flag}. By default. encoding is utf8, mode is octal value 0666. and flag is 'w'

callback: callback function which gets a single parameter err that returns an error in case of any writing error.


//4 Reading a File
fs.read(fd, buffer, offset, length, position, callback)
fd − file descriptor returned by fs.open().

buffer − buffer that the data will be written to.

offset − offset in the buffer to start writing at.

length − integer specifying the number of bytes to read.

position − integer specifying where to begin reading from in the file. If position is null, data will be read from the current file position.

callback − callback function which gets the three arguments, (err, bytesRead, buffer).


//5 Closing a File
fs.close(fd,callback)
fd: file descriptor returned by file fs.open() method.

callback: No arguments other than a possible exception are given to the completion callback.


//6 Truncate a File
fs.ftruncate(fd,len,callback)
fd: This is the file descriptor returned by fs.open().

len: This is the length of the file after which the file will be truncated.


//7 Delete a File
fs.unlink(path,callback)
path: This is the file name including path.


//8 Create, Read, Delete a Directory
 fs.mkdir(path[, mode], callback)

 fs.readdir(path, callback)

 fs.rmdir(path, callback)

 path: This is the directory name including path.
 mode: This is the directory permission to be set. Defaults to 0777.